---
import "../styles/global.css";
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import Header from '../components/Header.astro'; 
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
import Footer from "../components/Footer.astro";
import type {ui} from '../i18n/ui';
import type {LanguageKey, Translations} from '../i18n/utils';


interface Props {
  title: string;
  showFooter?: boolean;
}

const { title, showFooter = true } = Astro.props;
---

<!doctype html>
<html lang="zh-Hant">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/knotchen-logo.png" />
    <meta name="generator" content={Astro.generator} />

    <title> Knotchen 心結廚房 </title>

    <!-- Bootstrap -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />

    <!-- index -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const elementsToObserve = document.querySelectorAll(
          ".newsBanner, .socialMedBlk, .groupBanner, .groupIcon, .groupText, .otherLinks"
        );

        console.log("Elements to observe:", elementsToObserve);

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                console.log(`Element observed:`, entry.target); // Log when element is observed
                entry.target.classList.add("active");
                observer.unobserve(entry.target); // Stop observing
              }
            });
          },
          { threshold: 0.5 }
        );

        elementsToObserve.forEach((element) => observer.observe(element));
      });
    </script>

    <!-- Members -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const lang = document.documentElement.lang || 'zh-Hant';
        const isEng = lang === 'en';
        console.log("Language detected:", lang);

        const charButtons = document.querySelectorAll(".charSelect, .charSelected");

        charButtons.forEach((btn) => {
          const btnID = btn.id.replace("Btn", "");
          const isSelected = btn.classList.contains("charSelected");
          const suffix = isSelected
            ? isEng ? "-chosen-eng.png" : "-chosen.png"
            : isEng ? "-default-eng.png" : "-default.png";
          (btn as HTMLImageElement).src = `/${btnID}${suffix}`;
        });

        charButtons.forEach((button) => {
          button.addEventListener("click", function () {
            const displayID = button.id.replace("Btn", "");

            const charDisplays = document.querySelectorAll(
              ".charBanner, .textBlock, .charClipArt"
            );
            charDisplays.forEach((charDisplay) => {
              (charDisplay as HTMLElement).style.display = "none";
            });

            const elementsDisplay = document.querySelectorAll(`#${displayID}`);
            elementsDisplay.forEach((el) => {
              (el as HTMLElement).style.display = "block";
            });

            charButtons.forEach((btn) => {
              const btnID = btn.id.replace("Btn", "");
              if (btn) {
                const suffix = isEng ? "-default-eng.png" : '-default.png';
                (btn as HTMLImageElement).src = `/${btnID}${suffix}`;
              }
              btn.classList.remove("charSelected");
              btn.classList.add("charSelect");
            });

            const suffixChosen = isEng ? "-chosen-eng.png" : "-chosen.png";
            (button as HTMLImageElement).src = `/${displayID}${suffixChosen}`;
            button.classList.remove("charSelect");
            button.classList.add("charSelected");

          });
        });
      });

      //回到主頁
      document.addEventListener('DOMContentLoaded', function() {
      const backToTopBtn = document.getElementById('backToTopBtn');

        window.onscroll = function() {
          scrollFunction();
        };

        function scrollFunction() {
          if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
            backToTopBtn.style.display = 'block'; // Show the button
          } else {
            backToTopBtn.style.display = 'none'; // Hide the button
          }
        }

          backToTopBtn.onclick = function() {
            // Smooth scroll for modern browsers
            window.scrollTo({
              top: 0,
              behavior: 'smooth'
            });
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        };
      });
    </script>
  </head>

  <body>
    <Header {lang} {t}/>

    <main>
      <slot />
    </main>

     {showFooter && <Footer />} 

    <!-- Bootstrap -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"></script>
  </body>
</html>
